@inject Microsoft.AspNetCore.Identity.UserManager<ChatUser> _userManager
@inject Microsoft.AspNetCore.Identity.SignInManager<ChatUser> _signInManager

@{
    ViewData["Title"] = "Home - ChatApp";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<style>
    html {
        height: 100%;
    }

    body {
        height: 100%;
        overflow: hidden;
        display: flex;
        flex-direction: column;
    }

    main {
        flex: 1;
    }
</style>

<script src="~/js/ChatWindow.js"></script>


@if (!_signInManager.IsSignedIn(User))
{
    <div class="text-center">
        <h1 class="display-4">Welcome</h1>
        <p>Please <a asp-controller="Account" asp-action="Login">login</a> to see online friends.</p>
    </div>
}
else
{

    @section Scripts
{
        <script>
            var _chatWindow = null;

            var _messages = [];
            var _lastMessageCheckTime = new Date(0);

            //Event Handlers
            function AddFriend_Click() {
                $.post("/Friends/Add", { Username: $("#AddFriendUsername").val() }, function (result) {
                    if (result !== "")
                        alert(result);
                });
            }

            function FriendListItem_Clicked(object) {
                OpenFriendChat($(object).attr("data-id"));
            }

            //function btnSend_Click(object) {
            //    $("#txtMessageInput").focus();
            //    CreateTempMessageRow($("#txtMessageInput").val());
            //    ScrollToChatWindowBottom();

            //    var data = new Object();
            //    data.FriendID = _currentFriendID;
            //    data.Message = $("#txtMessageInput").val();
            //    $.post("/messages/sendmessage", data, function (result) {
            //        _messages.push(result);
            //        var tRow = $("#TempMessageRow");
            //        tRow.removeAttr("id");
            //        tRow.attr("data-id", result.id);
            //    });

            //    $("#txtMessageInput").val("");
            //}




            //User functions
            async function OpenFriendChat(friendID) {
                _chatWindow.CurrentFriendID = friendID;
                await GetMessagesForFriendID(friendID,true);

            }

            function GetMessagesForFriendID(ID, Scroll = false) {
                return new Promise(resolve => {
                    var data = { FriendID: ID };
                    $.getJSON("/Messages/GetFriendMessagesBeforeTime", data, function (result) {
                        var ids = _messages.map(msg => msg.id);

                        result.forEach(function (msg) {
                            if (ids.includes(msg.id) == false)
                                _messages.push(msg);
                        });

                        _chatWindow.Render(Scroll);
                        resolve();
                    });
                });
            }

            function GetNewMessages() {
                var data = {
                    After: _lastMessageCheckTime
                };
                $.get("/Messages/GetMessagesAfterTime", data, function (result) {
                    result.forEach(function (msg) {
                        if (msg.id != _chatWindow.CurrentFriendID)
                            $(".friendListItem[data-id=" + msg.id + "]").css("font-weight", "bold");

                        _messages.push(msg);
                    });

                    _chatWindow.Render(true);
                    _lastMessageCheckTime = new Date().toUTCString();

                });
            }

            function UpdateFriendList() {
                $.getJSON("/Friends/GetFriends").done(function (result) {
                    var friendList = $("#FriendList");
                    var template = $("#FriendRowTemplate");

                    //Clear existing friend list entries
                    friendList.children().not("#FriendRowTemplate").remove();

                    result.forEach(function (current) {
                        var newRow = template.clone();
                        newRow.removeAttr("id").removeAttr("style").text(current.username).attr("data-id", current.id);
                        friendList.append(newRow);
                    });
                });
            }

            function SendMessage(Message) {
                $.post("/messages/sendmessage", Message, function (result) {
                    _messages.push(result);
                    _chatWindow.UpdateTempMessageRow(result.id);
                });
            }

            function UpdateActiveTime() {
                $.post("/Account/UpdateActiveTime");
            }

            $(document).ready(function () {
                _chatWindow = new ChatWindow($("#ChatWindow"));
                _chatWindow.SendMessageEvent = SendMessage;

                var jobs = [
                    { func: UpdateActiveTime, interval: 30000 },
                    { func: UpdateFriendList, interval: 60000 },
                    { func: GetNewMessages, interval: 2000 }
                ];

                jobs.forEach(function (job) {
                    job.func();

                    setInterval(job.func, job.interval);
                });

            });

        </script>
    }

    <style>
        .chatContainer {
            height: 95%;
            display: flex;
            flex-direction: column;
            flex: 1 1 0;
            overflow-y: scroll;
        }

        .messageLine {
            display: flex;
            flex-direction: row;
        }

        .userMessageSpacer {
            flex-shrink: 1;
            flex-grow: 1;
            display: block;
        }

        .message {
            padding: 10px 20px 10px 20px;
            border-radius: 48px;
            min-width: 4%;
            text-align: center;
            max-width: 75%;
            text-align: left;
        }

        .userMessage {
            margin-right: 2%;
            background-color: deepskyblue;
            color: white;
            flex-direction: row-reverse;
        }

        .friendMessage {
            margin-left: 2%;
            background-color: #e5e5e5;
            color: black;
        }

        .friendListItem {
            cursor: pointer;
        }
    </style>

    <div class="row h-100">
        <div class="col-4 col-md-3 border-right">
            <div class="pl-2">
                <div class="form-inline input-group">
                    <input id="AddFriendUsername" class="form-control" type="text" name="AddFriendUsername" placeholder="Username" />
                    <button class="btn btn-primary" onclick="AddFriend_Click()">Add User</button>
                </div>

                <div class="card">
                    <div class="card-header">
                        Friends
                    </div>
                    <ul id="FriendList" class="list-group list-group-flush">
                        <li id="FriendRowTemplate" class="list-group-item friendListItem" style="display:none;" onclick="FriendListItem_Clicked(this)"></li>

                    </ul>
                </div>
            </div>

        </div>
        <div class="col-8 col-md-9 pl-0 d-flex flex-column mb-2" id="ChatWindow">
            <div class="messageLine mb-2" style="display:none" id="UserMessageTemplate">
                <div class="userMessageSpacer"></div>
                <div class="message userMessage"></div>
            </div>

            <div class="messageLine mb-2" style="display:none;" id="FriendMessageTemplate">
                <div class="message friendMessage">

                </div>
            </div>
            <div id="ChatPanel" class="chatContainer">


            </div>
            <div id="InputRow" class="mr-3 d-flex" style="display:none!important">
                <input type="text" id="txtMessageInput" class="form-control flex-grow-1 mr-2" placeholder="Type a message..." autocomplete="off" />
                <button id="btnSendMessage" class="btn-primary form-control" style="max-width:100px;flex-shrink:1;">Send</button>
            </div>
        </div>
    </div>
}

